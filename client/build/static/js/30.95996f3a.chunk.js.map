{"version":3,"sources":["Demo/actions/branchActions.js","Demo/Dashboard/Batch.js"],"names":["get_branches","dispatch","axios","post","then","res","type","LOAD_BRANCHES","payload","data","get_batches","LOAD_BATCHES","registerBranch","userData","history","response","GET_SUCCESS","catch","err","GET_ERRORS","deleteBranch","delId","console","log","Batch","Component","constructor","super","this","state","branchname","branchaddress","branchincharge","branchcontact","errors","succeserret","componentDidMount","props","auth","isAuthenticated","push","get_coach_view2_axios","render","batchlist","branch","coach2","coachlist","title","isOption","md","Group","controlId","Label","Control","placeholder","as","className","variant","responsive","hover","map","_id","batchname","batchcreatedon","href","DEMO","BLANK_LINK","connect","withRouter"],"mappings":"mIACA,mKAGO,MAAMA,EAAe,IAAMC,IAChCC,IACCC,KAAK,0BACLC,KAAKC,GAAKJ,EAAS,CAChBK,KAAOC,IACPC,QAASH,EAAII,SAKNC,EAAc,IAAMT,IAC/BC,IACCC,KAAK,yBACLC,KAAKC,GAAKJ,EAAS,CAChBK,KAAOK,IACPH,QAASH,EAAII,SAING,EAAiB,CAACC,EAAUC,IAAYb,IAEnDC,IACGC,KAAK,2BAA4BU,GACjCT,KAAKW,IACI,CACNT,KAAUU,IACVR,QAAUO,EAASN,QAGtBQ,MAAMC,GACLjB,EAAS,CACPK,KAAMa,IACNX,QAASU,EAAIH,SAASN,SAIjBW,EAAe,CAACC,EAAOP,IAAYb,IAE9CC,IACGC,KAAK,2BAA4BkB,GACjCjB,OAMAa,MAAMC,GAAOI,QAAQC,IAAIL,M,iCClD9B,+JAqBA,MAAMM,UAAcC,YAChBC,cACIC,QACAC,KAAKC,MAAQ,CACTC,WAAY,GACZC,cAAe,GACfC,eAAgB,GAChBC,cAAe,GACfC,OAAQ,GACRC,YAAa,IAGrBC,oBAEId,QAAQC,IAAI,+BAAiCK,KAAKS,MAAMC,KAAKC,iBAGxDX,KAAKS,MAAMC,KAAKC,iBACjBX,KAAKS,MAAMvB,QAAQ0B,KAAK,oBAG5BZ,KAAKS,MAAM3B,cACXkB,KAAKS,MAAMI,wBAEfC,SAAU,MACEC,EAAcf,KAAKS,MAAMO,OAAzBD,UACcf,KAAKS,MAAMQ,OAAzBC,UACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,MAAM,sBAAsBC,UAAQ,GACtC,kBAAC,IAAD,CAAKC,GAAI,IACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKA,GAAI,GACL,kBAAC,IAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAAC,IAAKC,MAAN,mBACA,kBAAC,IAAKC,QAAN,CAAc/C,KAAK,OAAOgD,YAAY,kBAG9C,kBAAC,IAAD,CAAKL,GAAI,GACL,kBAAC,IAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAAC,IAAKC,MAAN,sBACA,kBAAC,IAAKC,QAAN,CAAc/C,KAAK,OAAOgD,YAAY,oBAG9C,kBAAC,IAAD,CAAKL,GAAI,GACL,kBAAC,IAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAAC,IAAKC,MAAN,cACA,kBAAC,IAAKC,QAAN,CAAcE,GAAG,SAASC,UAAU,QAChC,uDACA,wDACA,qDACA,kDACA,oDAKZ,kBAAC,IAAD,CAAKP,GAAI,IACL,kBAAC,IAAD,CAAQQ,QAAQ,WAAhB,iBAU5B,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMV,MAAM,UAAUC,UAAQ,GAC1B,kBAAC,IAAD,CAAOU,YAAU,EAACC,OAAK,GACnB,+BACI,0CACA,uCACA,uCAEJ,+BACKhB,EAAUiB,IACP,EAAGC,MAAKC,YAAWC,oBAGnB,wBAAIP,UAAU,UAEd,4BACI,wBAAIA,UAAU,QAAQM,EAAtB,MAGJ,4BACI,wBAAIN,UAAU,cAAa,uBAAGA,UAAU,0CAA2CO,IAEvF,4BAAI,uBAAGC,KAAMC,IAAKC,WAAYV,UAAU,mCAApC,UAAgF,uBAAGQ,KAAMC,IAAKC,WAAYV,UAAU,kCAApC,qBA6B7GW,sBANStC,IAAK,CACzBS,KAAMT,EAAMS,KACZJ,OAAQL,EAAMK,OACdW,OAAQhB,EAAMgB,OACdD,OAAQf,EAAMe,SAId,CAAEhC,mBAAgBZ,iBAAcyC,0BAAuB/B,iBAF5CyD,CAGbC,YAAW5C","file":"static/js/30.95996f3a.chunk.js","sourcesContent":["\r\nimport { LOAD_BRANCHES,GET_ERRORS, SET_CURRENT_USER, USER_LOADING,GET_COACH_VIEW2, GET_SUCCESS , LOAD_BATCHES } from \"../../store/actions\";\r\nimport axios from \"axios\";\r\n\r\nexport const get_branches = () => dispatch =>{\r\n  axios\r\n  .post(\"/api/branch/viewbranch\")\r\n  .then(res=>dispatch({\r\n      type : LOAD_BRANCHES,\r\n      payload :res.data\r\n  }))\r\n\r\n}\r\n\r\nexport const get_batches = () => dispatch =>{\r\n  axios\r\n  .post(\"/api/branch/viewbatch\")\r\n  .then(res=>dispatch({\r\n      type : LOAD_BATCHES,\r\n      payload :res.data\r\n  }))\r\n\r\n}\r\nexport const registerBranch = (userData, history) => dispatch => {\r\n  const success = { success : \"success\"}\r\n  axios\r\n    .post(\"/api/branch/createbranch\", userData)\r\n    .then(response => {\r\n      return ({\r\n        type    : GET_SUCCESS,\r\n        payload : response.data\r\n      });\r\n    } )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      }) \r\n    );\r\n};\r\nexport const deleteBranch = (delId, history) => dispatch => {\r\n  const success = { success: \"success\" }\r\n  axios\r\n    .post(\"/api/branch/deletebranch\", delId)\r\n    .then(/* response => {\r\n      return ({\r\n        type: GET_SUCCESS,\r\n        payload: response.data\r\n      });\r\n    } */)\r\n    .catch(err => console.log(err)\r\n    \r\n      /* dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      }) */\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col, Table, Tabs, Tab, Form,\r\n    Button,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nimport avatar1 from '../../assets/images/user/avatar-1.jpg';\r\nimport avatar2 from '../../assets/images/user/avatar-2.jpg';\r\nimport avatar3 from '../../assets/images/user/avatar-3.jpg';\r\n\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerBranch, get_branches, deleteBranch, get_batches } from \"../actions/branchActions\";\r\nimport { get_coach_view2_axios } from \"../actions/coach2actions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Batch extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            branchname: \"\",\r\n            branchaddress: \"\",\r\n            branchincharge: \"\",\r\n            branchcontact: \"\",\r\n            errors: {},\r\n            succeserret: {}\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        /* this._isMounted = true; */\r\n        console.log(\"On coach page this is state \" + this.props.auth.isAuthenticated);\r\n\r\n        // If logged in and user navigates to Register page, should redirect them to dashboard\r\n        if (!this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"../auth/signin-1\");\r\n        }\r\n        // fire functon to get branch & caoch list \r\n        this.props.get_batches();\r\n        this.props.get_coach_view2_axios();\r\n    }\r\n    render() {\r\n        const { batchlist } = this.props.branch;\r\n        const { coachlist } = this.props.coach2;\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title='Batch creation form' isOption>\r\n                            <Col md={12}>\r\n                                <Form>\r\n                                    <Row>\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Batch Name</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"Branch Name\" />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Standard fees</Form.Label>\r\n                                                <Form.Control type=\"test\" placeholder=\"Mobile number\" />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Coach</Form.Label>\r\n                                                <Form.Control as=\"select\" className=\"mb-3\">\r\n                                                    <option>Select the Inchrage</option>\r\n                                                    <option>Isabella Christensen</option>\r\n                                                    <option>Mathilde Andersen</option>\r\n                                                    <option>Karla Sorensen</option>\r\n                                                    <option>Ida Jorgensen</option>\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col md={12}>\r\n                                            <Button variant=\"primary\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            </Col>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <Card title='Batches' isOption>\r\n                            <Table responsive hover>\r\n                                <thead>\r\n                                    <th>Batch Name</th>\r\n                                    <th>Created</th>\r\n                                    <th>Action</th>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {batchlist.map(\r\n                                        ({ _id, batchname ,batchcreatedon}) => \r\n                                        \r\n                                        \r\n                                        <tr className=\"unread\">\r\n\r\n                                        <td>\r\n                                            <h6 className=\"mb-1\">{batchname} </h6>\r\n\r\n                                        </td>\r\n                                        <td>\r\n                                            <h6 className=\"text-muted\"><i className=\"fa fa-circle text-c-green f-10 m-r-15\" />{batchcreatedon}</h6>\r\n                                        </td>\r\n                                        <td><a href={DEMO.BLANK_LINK} className=\"label theme-bg2 text-white f-12\">Reject</a><a href={DEMO.BLANK_LINK} className=\"label theme-bg text-white f-12\">Approve</a></td>\r\n                                    </tr>\r\n                                        \r\n                                        )\r\n                                    }\r\n                                    \r\n                                </tbody>\r\n                            </Table>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\nBatch.propTypes = {\r\n    registerBranch: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    coach2: PropTypes.object.isRequired,\r\n    branch: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    coach2: state.coach2,\r\n    branch: state.branch,\r\n});\r\nexport default connect(\r\n    mapStateToProps,\r\n    { registerBranch, get_branches, get_coach_view2_axios, get_batches }\r\n)(withRouter(Batch));"],"sourceRoot":""}