{"version":3,"sources":["Demo/actions/branchActions.js","Demo/Dashboard/Branch.js"],"names":["get_branches","dispatch","axios","post","then","res","type","LOAD_BRANCHES","payload","data","get_batches","LOAD_BATCHES","registerBranch","userData","history","response","GET_SUCCESS","catch","err","GET_ERRORS","deleteBranch","delId","console","log","Branch","Component","constructor","super","onChange","e","target","id","value","this","setState","onSubmit","preventDefault","newUser","branchname","state","branchaddress","branchincharge","branchcontact","props","handleClick","_id","deleteId","branchid","window","confirm","errors","succeserret","componentDidMount","auth","isAuthenticated","push","get_coach_view2_axios","componentWillReceiveProps","nextProps","render","branchlist","branch","coachlist","coach2","title","isOption","md","noValidate","Group","controlId","Label","error","className","classnames","invalid","placeholder","map","name","contact","variant","style","color","sucstring","responsive","hover","href","DEMO","BLANK_LINK","onClick","connect","withRouter"],"mappings":"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","file":"static/js/31.94d29e69.chunk.js","sourcesContent":["\r\nimport { LOAD_BRANCHES,GET_ERRORS, SET_CURRENT_USER, USER_LOADING,GET_COACH_VIEW2, GET_SUCCESS , LOAD_BATCHES } from \"../../store/actions\";\r\nimport axios from \"axios\";\r\n\r\nexport const get_branches = () => dispatch =>{\r\n  axios\r\n  .post(\"/api/branch/viewbranch\")\r\n  .then(res=>dispatch({\r\n      type : LOAD_BRANCHES,\r\n      payload :res.data\r\n  }))\r\n\r\n}\r\n\r\nexport const get_batches = () => dispatch =>{\r\n  axios\r\n  .post(\"/api/branch/viewbatch\")\r\n  .then(res=>dispatch({\r\n      type : LOAD_BATCHES,\r\n      payload :res.data\r\n  }))\r\n\r\n}\r\nexport const registerBranch = (userData, history) => dispatch => {\r\n  const success = { success : \"success\"}\r\n  axios\r\n    .post(\"/api/branch/createbranch\", userData)\r\n    .then(response => {\r\n      return ({\r\n        type    : GET_SUCCESS,\r\n        payload : response.data\r\n      });\r\n    } )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      }) \r\n    );\r\n};\r\nexport const deleteBranch = (delId, history) => dispatch => {\r\n  const success = { success: \"success\" }\r\n  axios\r\n    .post(\"/api/branch/deletebranch\", delId)\r\n    .then(/* response => {\r\n      return ({\r\n        type: GET_SUCCESS,\r\n        payload: response.data\r\n      });\r\n    } */)\r\n    .catch(err => console.log(err)\r\n    \r\n      /* dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      }) */\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col, Table, Tabs, Tab, Form,\r\n    Button,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nimport avatar1 from '../../assets/images/user/avatar-1.jpg';\r\nimport avatar2 from '../../assets/images/user/avatar-2.jpg';\r\nimport avatar3 from '../../assets/images/user/avatar-3.jpg';\r\n\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerBranch, get_branches,deleteBranch } from \"../actions/branchActions\";\r\nimport { get_coach_view2_axios } from \"../actions/coach2actions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Branch extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            branchname: \"\",\r\n            branchaddress: \"\",\r\n            branchincharge: \"\",\r\n            branchcontact: \"\",\r\n            errors: {},\r\n            succeserret : {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* this._isMounted = true; */\r\n        console.log(\"On coach page this is state \" + this.props.auth.isAuthenticated);\r\n\r\n        // If logged in and user navigates to Register page, should redirect them to dashboard\r\n        if (!this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"../auth/signin-1\");\r\n        }\r\n        // fire functon to get branch & caoch list \r\n        this.props.get_branches();\r\n        this.props.get_coach_view2_axios();\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"props are below =========>\")\r\n        console.log(nextProps);\r\n        console.log(\"props are above =========>\")\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            }, () => {\r\n                console.log(this.state.errors, 'dealersOverallTotal1')\r\n            });\r\n\r\n        }else{\r\n            this.setState({\r\n                errors: {}\r\n            }, () => {\r\n                console.log(this.state.errors, 'dealersOverallTotal1')\r\n            });\r\n        }\r\n        if (nextProps.succeserret) {\r\n            this.setState({\r\n                succeserret: nextProps.succeserret\r\n            }, () => {\r\n                console.log(this.state.succeserret, 'dealersOverallTotal1')\r\n            });\r\n\r\n        }\r\n    }\r\n    onChange = e => {\r\n        console.log(\"targeting state \" + e.target.id + \" with value \" + e.target.value);\r\n\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newUser = {\r\n            branchname: this.state.branchname,\r\n            branchaddress: this.state.branchaddress,\r\n            branchincharge: this.state.branchincharge,\r\n            branchcontact: this.state.branchcontact\r\n\r\n        };\r\n        console.log(newUser);\r\n        \r\n       \r\n        this.props.registerBranch(newUser, this.props.history);\r\n        this.props.get_branches();\r\n    };\r\n    handleClick = value => () => {\r\n        console.log(value._id);\r\n        \r\n        const deleteId = {\r\n            branchid: value._id,\r\n        };\r\n        if(window.confirm(\"Are you sure to delete this branch ?\")){\r\n            this.props.deleteBranch(deleteId, this.props.history);\r\n            this.props.get_branches();\r\n        }\r\n        \r\n       \r\n      };\r\n    render() {\r\n        const { errors } = this.state;\r\n        const { succeserret } = this.state;\r\n        const { branchlist } = this.props.branch;\r\n        const { coachlist } = this.props.coach2;\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title='Branch creation form' isOption>\r\n                            <Col md={12}>\r\n                            <form noValidate onSubmit={this.onSubmit}>\r\n                                    <Row>\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Branch Name</Form.Label>\r\n                                                <input\r\n                                                    onChange={this.onChange}\r\n                                                    value={this.state.branchname}\r\n                                                    error={errors.branchname}\r\n                                                    id=\"branchname\"\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\"form-control\", {\r\n                                                        invalid: errors.branchname\r\n                                                    })} placeholder=\"Branch name\" />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Branch Contact no.</Form.Label>\r\n                                                <input\r\n                                                    onChange={this.onChange}\r\n                                                    value={this.state.branchcontact}\r\n                                                    error={errors.branchcontact}\r\n                                                    id=\"branchcontact\"\r\n                                                    type=\"contact\"\r\n                                                    className={classnames(\"form-control\", {\r\n                                                        invalid: errors.branchcontact\r\n                                                    })} placeholder=\"Contact No.\" />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Address</Form.Label>\r\n                                                <input\r\n                                                    onChange={this.onChange}\r\n                                                    value={this.state.branchaddress}\r\n                                                    error={errors.branchaddress}\r\n                                                    id=\"branchaddress\"\r\n                                                    type=\"text\"\r\n                                                    className={classnames(\"form-control\", {\r\n                                                        invalid: errors.branchaddress\r\n                                                    })} placeholder=\"Branch Address\" />\r\n                                            </Form.Group>\r\n                                        </Col> <Col md={4}>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Incharge</Form.Label>\r\n                                                <select\r\n                                                    onChange={this.onChange}\r\n                                                    value={this.state.branchincharge}\r\n                                                    error={errors.branchincharge}\r\n                                                    id=\"branchincharge\"\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control mb-3\">\r\n                                                    <option value=\"\" >Select a coach</option>\r\n                                                    {console.log(coachlist)\r\n                                                    }\r\n                                                    {coachlist.map(\r\n                                                        ({ _id, name, contact }) => <option value={_id} >{name}</option>)\r\n                                                    }\r\n                                                </select>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col md={12}>\r\n                                            <Button variant=\"primary\" type=\"submit\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <span style={{ color: \"#cc0000\" }}> {this.state.errors.branchname ||this.state.errors.branchaddress ||this.state.errors.branchincharge ||this.state.errors.branchcontact }</span>\r\n                                            <span style={{ color: \"#22bb33\" }}> {this.state.errors.sucstring }</span>\r\n                                            \r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </Col>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title='Branches' isOption>\r\n                            <Table responsive hover>\r\n                                <thead>\r\n                                    <th>Branch Name</th>\r\n                                    <th>Incharge </th>\r\n                                    <th>Contact</th>\r\n                                    <th>Actions</th>\r\n                                </thead>\r\n                                <tbody>\r\n\r\n                                    {branchlist.map(\r\n                                        ({ _id, branchname, branchaddress, branchincharge, branchcontact }) =>\r\n                                            <tr>\r\n                                                <td>\r\n\r\n                                                    {branchname}\r\n                                                </td>\r\n                                                <td>\r\n                                                    <h6 className=\"mb-1\">{branchincharge}</h6>\r\n                                                </td>\r\n                                                <td>{branchcontact}</td>\r\n                                                <td>\r\n                                                    {/* <a class=\"btn btn-small\"><i class=\"material-icons left\">edit</i>edit</a>\r\n                                                     <a class=\"btn btn-small red\"><i class=\"material-icons left\">delete</i>delete</a> */}\r\n                                                    <a href={DEMO.BLANK_LINK} className=\"label theme-bg text-white f-12\">Edit</a>\r\n                                                    <a onClick={this.handleClick({_id})} className=\"label theme-bg2 text-white f-12\">Delete</a>\r\n                                                </td>\r\n\r\n                                            </tr>\r\n                                    )}\r\n\r\n\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\nBranch.propTypes = {\r\n    registerBranch: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    coach2: PropTypes.object.isRequired,\r\n    branch: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    coach2: state.coach2,\r\n    branch: state.branch,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { registerBranch, get_branches, get_coach_view2_axios ,deleteBranch}\r\n)(withRouter(Branch));\r\n"],"sourceRoot":""}